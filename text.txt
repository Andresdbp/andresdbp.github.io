#!/bin/bash
#SBATCH --job-name=process_files
#SBATCH --output=output_%j.txt
#SBATCH --error=error_%j.txt
#SBATCH --time=01:00:00  # Adjust time as needed
#SBATCH --partition=your_partition  # Adjust partition as needed
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=4  # Adjust CPUs per task as needed
#SBATCH --mem=4G  # Adjust memory as needed

# Load necessary modules if required
# module load some_module

# Define the base directory containing the folders
BASE_DIR="/path/to/your/folders"

# Define the list of folder names
FOLDERS=("folder1" "folder2" "folder3" "folder4")

# Find all unique prefixes
prefixes=$(find $BASE_DIR -type f -name "21-869-????_*_L00?_R*.fastq.qz" | \
           sed -r 's/(21-869-[0-9]{4}_[^_]+_L00[0-9]).*/\1/' | sort -u)

# Loop through each unique prefix
for prefix in $prefixes; do
  # Find the R1 and R2 files that match the current prefix pattern
  R1_file=$(find $BASE_DIR -type f -name "${prefix}_R1.fastq.gz")
  R2_file=$(find $BASE_DIR -type f -name "${prefix}_R2.fastq.gz")
  
  # Check if both R1 and R2 files exist
  if [[ -n $R1_file && -n $R2_file ]]; then
    # Extract the actual prefix (up to [FOLDER_NAME]) for naming the output
    actual_prefix=$(basename $R1_file | sed -r 's/(21-869-[0-9]{4}_[^_]+)_L00[0-9]_R[0-9].*/\1/')
    
    # Create output directory if it doesn't exist
    mkdir -p output/$actual_prefix

    # Run the singularity command
    echo "Running command for prefix: $actual_prefix"
    singularity exec --bind /projects/ optitype OptiTyplePipeline.py -i $R1_file $R2_file --ddna --prefix $actual_prefix --outdir output/$actual_prefix -v
  else
    echo "Missing R1 or R2 file for prefix: $prefix"
  fi
done
